values=c("#999999", "#333333")) +
annotate("text", x = 5.5, y = 13.6, label = "Day") +
annotate("text", x = 5.5, y = 8.9, label = "Night")
Temp<-seq(-6,6,1)
yvalsNoMoon<-8.4015929679+(0.2287219294*Temp)
yvalsSomeMoon<-8.4015929679+(350*0.0064088292)+(0.2287219294*Temp)
yvalsFullMoon<-8.4015929679+(700*0.0064088292)+(0.2287219294*Temp)
MAdat$a <- 1
MAdat2$b <- 2
### Rename columns to allow vertical stacking
names(MAdat2)[names(MAdat2)=="Max_DA"] <- "Max_NA"
names(MAdat2)[names(MAdat2)=="Act_DA"] <- "Act_NA"
names(MAdat2)[names(MAdat2)=="b"] <- "a"
names(MAdat2)[names(MAdat2)=="y"] <- "x"
Tdat <- rbind(MAdat, MAdat2)
MAdat <- data.frame(Max_NA,Act_NA)
Ydat <- data.frame(c(yvalsYes, yvalsYesDay, yvalsNo, yvalsNoDay))
colnames(Ydat)[1] <- "vals"
Ydat$Temp <- rep(-6:6)
Ydat$den <- rep(1:4, each=13)
Ydat$coll <- rep(1:4, each=13)
cols <- c("1" = "#333333", "2" = "#333333", "3" = "#999999", "4" = "#999999")
shps <- c(16,1,16,1)
names(shps) <- c(1,2,3,4)
ggplot() +
theme_few()+
xlab("Maximum temperature (C)") +
ylab("Mean activity") +
### All 4 line plots have been condensed into one line of code, grouped by 'coll'.
### geom_jitter allows jittering (slight moving) of point data, to ease iterpretation.
### Jittering doesn't move points substantially.
### To remove jittering, change to geom_points and remove
### position = position_jitter(width = 0.5, height = 0.5)
geom_jitter(data = Tdat, aes(Max_NA, Act_NA,
shape = factor(x), colour = factor(x), group = a),
position = position_jitter(width = 0.5, height = 0.5), size=1.25) +
geom_line(data = Ydat, aes(x = Temp, y = vals, group = factor(den), colour = factor(den)), size=1.5) +
geom_jitter() +
### scale_colour defines the legend and colours of the line plot.
### scale_shape relates to the point data.
scale_colour_manual(name="Denning",
labels = c("Yes", "No"),
values=cols,
limits = c("1", "3")) +
scale_shape_manual(name="Period",
values = shps,
breaks=c("1", "2"),
labels=c("Day", "Night")) +
theme(axis.text.y   = element_text(size=14, colour = "black"),
axis.text.x   = element_text(size=14, colour = "black"),
axis.title.y  = element_text(size=15, face="bold"),
axis.title.x  = element_text(size=15, face="bold"),
legend.title = element_text(colour="black", size=14, face="bold"),
legend.key = element_rect(fill = "white"),
panel.margin = unit(5,"lines"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)
) +
scale_x_continuous(limits = c(-6,6), expand = c(0, 0), breaks = c(-6,-4,-2,0,2,4,6),
labels = c("20.5","22.5","24.5","26.5","28.5","30.5","32.5")) +
scale_y_continuous(limits=c(0,30), expand = c(0, 0)) +
annotate("text", x = 5.5, y = 13.6, label = "Day") +
annotate("text", x = 5.5, y = 8.9, label = "Night")
fixef(Night_Act_lme)
Moonlight<-seq(0,700,50)
yvalsLowTemp<-8.4015929679+(-6*0.2287219294)+(0.0064088292*Moonlight)
yvalsAvTemp<-8.4015929679+(0.0064088292*Moonlight)
yvalsHighTemp<-8.4015929679+(6*0.2287219294)+(0.0064088292*Moonlight)
qDATActAll4 <- data.frame(Moonlight, yvalsLowTemp, yvalsAvTemp, yvalsHighTemp)
ggplot(qDATActAll4, aes(Temp)) +
xlim(0,700) +
xlab("moon") +
ylim(-6,6) +
ylab("Average Activity") +
geom_line(aes(y = yvalsLowTemp, colour = "blue")) +
geom_line(aes(y = yvalsAvTemp, colour = "red")) +
geom_line(aes(y = yvalsHighTemp, colour = "green")) +
theme(axis.text.y   = element_text(size=14, colour = "black"),
axis.text.x   = element_text(size=14, colour = "black"),
axis.title.y  = element_text(size=15, face="bold"),
axis.title.x  = element_text(size=15, face="bold"),
legend.title = element_text(colour="black", size=14, face="bold"),
legend.key = element_rect(fill = "white"),
panel.margin = unit(5,"lines"),
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)
) +
annotate("text", x = 5.5, y = 13.6, label = "1") +
annotate("text", x = 5.5, y = 8.9, label = "2")
library("knitr", lib.loc="~/R/win-library/3.3")
library("knitr", lib.loc="~/R/win-library/3.3")
install.packages("rmarkdown")
tpmPalette <- c("#D6C078", "#897320", "#AE191D", "#ACBBC2",
"#881C1E", "#90CFEA", "#DDDEEE", "#F9A31D")
# Attack of the Clones
aotcPalette <- c("#D6C078", "#897320", "#372324", "#6F3A3F",
"#E7A944", "#006DB2", "#A9D9FE", "#6B6B56")
# Revenge of the Sith
rotsPalette <- c("#D6C078", "#897320", "#525252", "#787878",
"#9E291C", "#F16B28", "#B7DDF1", "#006DB2")
# A New Hope
anhPalette <- c("#D6C078", "#F1B084", "#9E5960", "#0C5BA0",
"#5E9FDD", "#433011", "#FCFEFF", "#C38348")
# The Empre Strikes Back
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#A00F19",
"#90931C", "#0B1428", "#CFD178", "#123C90")
# Return of the Jedi
rotjPalette <- c("#CCB361", "#E89F6F", "#1E5321", "#69A85F",
"#459C2C", "#4A2A00", "#A00F19", "#106382")
# The Force Awakens
tfaPalette <- c("#CCB361", "#A10000", "#D90008", "#51B6ED",
"#41E19A", "#B09971", "#985C18", "#BBAE95")
tfaPalette
n=8
pie(rep(1,n), col=tfaPalette)
library(plotrix)
sliceValues <- rep(10, 8) # each slice value=10 for proportionate slices
pie3D(sliceValues,explode=0, theta=1.2, col=rainbow(n=7), main="rainbow()")
pie3D(sliceValues,explode=0, theta=1.2, col=tpmPalette, main="The Phantom Menace")
par(mfrow=c(2, 4))
pie3D(sliceValues,explode=0, theta=1.2, col=tpmPalette, main="The Phantom Menace")
pie3D(sliceValues,explode=0, theta=1.2, col=aotcPalette, main="Attack of the Clones")
pie3D(sliceValues,explode=0, theta=1.2, col=rotsPalette, main="Revenge of the Sith")
pie3D(sliceValues,explode=0, theta=1.2, col=anhPalette, main="A New Hope")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
pie3D(sliceValues,explode=0, theta=1.2, col=rotjPalette, main="Return of the Jedi")
pie3D(sliceValues,explode=0, theta=1.2, col=tfaPalette, main="The Force Awakens")
# 8-colour palettes based on the films of the Star Wars saga
# Colours based on http://www.fubiz.net/en/2015/04/20/the-colors-of-star-wars-palettes/
# The Phantom Menace
tpmPalette <- c("#D6C078", "#897320", "#AE191D", "#ACBBC2",
"#881C1E", "#90CFEA", "#DDDEEE", "#F9A31D")
# Attack of the Clones
aotcPalette <- c("#D6C078", "#897320", "#372324", "#6F3A3F",
"#E7A944", "#006DB2", "#A9D9FE", "#6B6B56")
# Revenge of the Sith
rotsPalette <- c("#D6C078", "#897320", "#525252", "#787878",
"#9E291C", "#F16B28", "#B7DDF1", "#006DB2")
# A New Hope
anhPalette <- c("#D6C078", "#F1B084", "#9E5960", "#0C5BA0",
"#5E9FDD", "#433011", "#FCFEFF", "#C38348")
# The Empre Strikes Back
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#A00F19",
"#90931C", "#0B1428", "#CFD178", "#123C90")
# Return of the Jedi
rotjPalette <- c("#CCB361", "#E89F6F", "#1E5321", "#69A85F",
"#459C2C", "#4A2A00", "#A00F19", "#106382")
# The Force Awakens
tfaPalette <- c("#CCB361", "#A10000", "#D90008", "#51B6ED",
"#41E19A", "#B09971", "#985C18", "#BBAE95")
# To use for fills, add
scale_fill_manual(values=palette name)
# To use for line and point colors, add
scale_colour_manual(values=palette name)
# To apply to plot, include in aes
ggplot(df, aes(x=x, y=y, colour=palette name))
# Create a pie chart with n=8 colors using each palette
library(plotrix)
sliceValues <- rep(10, 8) # each slice value=10 for proportionate slices
# Create a figure with all 7 base color palettes
par(mfrow=c(2, 4))
pie3D(sliceValues,explode=0, theta=1.2, col=tpmPalette, main="The Phantom Menace")
pie3D(sliceValues,explode=0, theta=1.2, col=aotcPalette, main="Attack of the Clones")
pie3D(sliceValues,explode=0, theta=1.2, col=rotsPalette, main="Revenge of the Sith")
pie3D(sliceValues,explode=0, theta=1.2, col=anhPalette, main="A New Hope")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
pie3D(sliceValues,explode=0, theta=1.2, col=rotjPalette, main="Return of the Jedi")
pie3D(sliceValues,explode=0, theta=1.2, col=tfaPalette, main="The Force Awakens")
# 8-colour palettes based on the films of the Star Wars saga
# Colours based on http://www.fubiz.net/en/2015/04/20/the-colors-of-star-wars-palettes/
# The Phantom Menace
tpmPalette <- c("#D6C078", "#897320", "#AE191D", "#ACBBC2",
"#881C1E", "#90CFEA", "#DDDEEE", "#F9A31D")
# Attack of the Clones
aotcPalette <- c("#D6C078", "#897320", "#372324", "#6F3A3F",
"#E7A944", "#006DB2", "#A9D9FE", "#6B6B56")
# Revenge of the Sith
rotsPalette <- c("#D6C078", "#897320", "#525252", "#787878",
"#9E291C", "#F16B28", "#B7DDF1", "#006DB2")
# A New Hope
anhPalette <- c("#D6C078", "#F1B084", "#9E5960", "#0C5BA0",
"#5E9FDD", "#433011", "#FCFEFF", "#C38348")
# The Empre Strikes Back
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#A00F19",
"#90931C", "#0B1428", "#CFD178", "#123C90")
# Return of the Jedi
rotjPalette <- c("#CCB361", "#E89F6F", "#1E5321", "#69A85F",
"#459C2C", "#4A2A00", "#A00F19", "#106382")
# The Force Awakens
tfaPalette <- c("#CCB361", "#A10000", "#D90008", "#51B6ED",
"#41E19A", "#B09971", "#985C18", "#BBAE95")
# To use for fills, add
scale_fill_manual(values=palette name)
# To use for line and point colors, add
scale_colour_manual(values=palette name)
# To apply to plot, include in aes
ggplot(df, aes(x=x, y=y, colour=palette name))
# Create a pie chart with n=8 colors using each palette
library(plotrix)
sliceValues <- rep(10, 8) # each slice value=10 for proportionate slices
# Create a figure with all 7 base color palettes
par(mfrow=c(2, 4))
pie3D(sliceValues,explode=0, theta=1.2, col=tpmPalette, main="The Phantom Menace")
pie3D(sliceValues,explode=0, theta=1.2, col=aotcPalette, main="Attack of the Clones")
pie3D(sliceValues,explode=0, theta=1.2, col=rotsPalette, main="Revenge of the Sith")
pie3D(sliceValues,explode=0, theta=1.2, col=anhPalette, main="A New Hope")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
pie3D(sliceValues,explode=0, theta=1.2, col=rotjPalette, main="Return of the Jedi")
pie3D(sliceValues,explode=0, theta=1.2, col=tfaPalette, main="The Force Awakens")
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#881C1E",
"#90931C", "#0B1428", "#CFD178", "#123C90")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
pie3D(sliceValues,explode=0, theta=1.2, col=tpmPalette, main="The Phantom Menace")
pie3D(sliceValues,explode=0, theta=1.2, col=aotcPalette, main="Attack of the Clones")
pie3D(sliceValues,explode=0, theta=1.2, col=rotsPalette, main="Revenge of the Sith")
pie3D(sliceValues,explode=0, theta=1.2, col=anhPalette, main="A New Hope")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
pie3D(sliceValues,explode=0, theta=1.2, col=rotjPalette, main="Return of the Jedi")
pie3D(sliceValues,explode=0, theta=1.2, col=tfaPalette, main="The Force Awakens")
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#881C1E",
"#90931C", "#0B1428", "#CFD178", "#123C90")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
# The Empire Strikes Back
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#881C1E",
"#90931C", "#0B1428", "#CFD178", "#123C90")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#881C1E",
"#90931C", "#0B1428", "#CFD178", "#123C90")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
sliceValues <- rep(10, 8) # each slice value=10 for proportionate slices
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
aotcPalette <- c("#D6C078", "#897320", "#372324", "#6F3A3F",
"#E7A944", "#006DB2", "#A9D9FE", "#6B6B56")
pie3D(sliceValues,explode=0, theta=1.2, col=aotcPalette, main="Attack of the Clones")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#A00F19",
"#90931C", "#0B1428", "#A9D9FE", "#123C90")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
tesbPalette <- c("#CCB361", "#E89F6F", "#72142A", "#A00F19",
"#90931C", "#0B1428", "#A9D9FE", "#123C90")
library(plotrix)
sliceValues <- rep(10, 8) # each slice value=10 for proportionate slices
pie3D(sliceValues,explode=0, theta=1.2, col=anhPalette, main="A New Hope")
pie3D(sliceValues,explode=0, theta=1.2, col=tesbPalette, main="The Empire Strikes Back")
library("remBoot", lib.loc="~/R/win-library/3.3")
data(hDat)
grpDat <- split_dat(hDat)
lapply(grpDat, head)
# Check group counts
lapply(grpDat, nrow)
tm <- 3600
v <- 1.2
nboots <- 1000
site <- seq(1:5)
estDat <- data.frame(site)
estDat$den <- NULL
estDat[1,2] <- rem(dat = grpDat[[1]], tm, v)
estDat[2,2] <- rem(dat = grpDat[[2]], tm, v)
estDat[3,2] <- rem(dat = grpDat[[3]], tm, v)
estDat[4,2] <- rem(dat = grpDat[[4]], tm, v)
estDat[5,2] <- rem(dat = grpDat[[5]], tm, v)
estDat$sd <- as.numeric(remsSD)
remsD <- lapply(grpDat, boot_sd)
site <- seq(1:5)
estDat <- data.frame(site)
estDat$den <- NULL
estDat[1,2] <- rem(dat = grpDat[[1]], tm, v)
estDat[2,2] <- rem(dat = grpDat[[2]], tm, v)
estDat[3,2] <- rem(dat = grpDat[[3]], tm, v)
estDat[4,2] <- rem(dat = grpDat[[4]], tm, v)
estDat[5,2] <- rem(dat = grpDat[[5]], tm, v)
estDat$sd <- as.numeric(remsSD)
remsSD <- lapply(remsD, sd)
site <- seq(1:5)
estDat <- data.frame(site)
estDat$den <- NULL
estDat[1,2] <- rem(dat = grpDat[[1]], tm, v)
estDat[2,2] <- rem(dat = grpDat[[2]], tm, v)
estDat[3,2] <- rem(dat = grpDat[[3]], tm, v)
estDat[4,2] <- rem(dat = grpDat[[4]], tm, v)
estDat[5,2] <- rem(dat = grpDat[[5]], tm, v)
estDat$sd <- as.numeric(remsSD)
ggplot(estDat, aes(x = site, y = den)) +
geom_bar(position = position_dodge(), stat="identity", fill="light blue") +
geom_errorbar(aes(ymin=den-sd, ymax=den+sd))
library("ggplot2", lib.loc="~/R/win-library/3.3")
ggplot(estDat, aes(x = site, y = den)) +
geom_bar(position = position_dodge(), stat="identity", fill="light blue") +
geom_errorbar(aes(ymin=den-sd, ymax=den+sd))
View(estDat)
site <- seq(1:5)
estDat <- data.frame(site)
estDat$den <- NULL
View(estDat)
estDat[den] <- NULL
estDat["den"] <- NULL
View(estDat)
estDat$dens <- NULL
View(estDat)
estDat$dens <- seq(1:5)
estDat[1,2] <- rem(dat = grpDat[[1]], tm, v)
estDat[2,2] <- rem(dat = grpDat[[2]], tm, v)
estDat[3,2] <- rem(dat = grpDat[[3]], tm, v)
estDat[4,2] <- rem(dat = grpDat[[4]], tm, v)
estDat[5,2] <- rem(dat = grpDat[[5]], tm, v)
estDat$sd <- as.numeric(remsSD)
View(estDat)
ggplot(estDat, aes(x = site, y = dens)) +
geom_bar(position = position_dodge(), stat="identity", fill="light blue") +
geom_errorbar(aes(ymin=dens-sd, ymax=dens+sd))
ggplot(estDat, aes(x = site, y = dens)) +
geom_bar(position = position_dodge(), stat="identity", fill="light blue") +
geom_errorbar(aes(ymin=dens-sd, ymax=dens+sd)) +
scale_x_continuous(name="Survey site") +
scale_y_continuous(name="Animals.km2") +
ggtitle("Animal density estimates calculated with REM and remBoot")
library(remBoot)
?boot_sd
?remBoot
output: pdf_document
install.packages("installr")
installr::installr()
remove.packages("remBoot", lib="~/R/win-library/3.3")
library(githubinstall)
githubinstall("remBoot")
data(hDat)
load("G:/Dropbox/GitHub/remBoot/data-raw/hDat.RData")
View(remDat)
library(remBoot)
data(hDat)
grpDat <- split_dat(hDat)
rem(dat = grpDat[[1]], tm = 3600, v = 1.4)
tm <- 3600
v <- 1.4
rem(dat = grpDat[[1]], tm, v)
nboots <- 1000
remsD <- lapply(grpDat, boot_sd)
remsSD <- lapply(remsD, sd)
remsSD
tm <- 1880
v <- 0.89
nboots <- 1000
output <- remBoot(hDat, tm, v, nboots, error_stat = c("sd"))
output
data(hDat)
output <- remBoot(hDat, tm = 2870, v = 1.8, nboots = 1000, error_stat = c("ci"))
detach("package:remBoot", unload=TRUE)
remBoot <- function(.df, tm, v, nboots, error_stat){
## Written by Kevin Keenan 2013 and Anthony Caravaggi 2016
## distributed under GPL3
grpDat <- split_dat(.df)
remsD <- lapply(grpDat, function(x){
d <- replicate(nboots, bsD(x, tm, v))
return(d)
})
res <- list()
if(is.element("sd", error_stat)){
resSD <- lapply(remsD, sd)
names(resSD) <- levels(.df[[1]])
res$sd <- c(res, resSD)
}
if(is.element("ci", error_stat)){
resCI <- t(sapply(remsD, quantile, probs = c(0.025, 0.975)))
colnames(resCI) <- c("Lower", "Upper")
rownames(resCI) <- levels(.df[[1]])
res$ci <- resCI
}
return(res)
}
output <- remBoot(hDat, tm = 2870, v = 1.8, nboots = 1000, error_stat = c("ci"))
library("remBoot", lib.loc="~/R/win-library/3.3")
remBoot2 <- function(.df, tm, v, nboots, error_stat){
## Written by Kevin Keenan 2013 and Anthony Caravaggi 2016
## distributed under GPL3
grpDat <- split_dat(.df)
remsD <- lapply(grpDat, function(x){
d <- replicate(nboots, bsD(x, tm, v))
return(d)
})
res <- list()
if(is.element("sd", error_stat)){
resSD <- lapply(remsD, sd)
names(resSD) <- levels(.df[[1]])
res$sd <- c(res, resSD)
}
if(is.element("ci", error_stat)){
resCI <- t(sapply(remsD, quantile, probs = c(0.025, 0.975)))
colnames(resCI) <- c("Lower", "Upper")
rownames(resCI) <- levels(.df[[1]])
res$ci <- resCI
}
return(res)
}
output <- remBoot2(hDat, tm = 2870, v = 1.8, nboots = 1000, error_stat = c("ci"))
output
output <- remBoot(hDat, tm = 2870, v = 1.8, nboots = 1000, error_stat = c("ci"))
output
rem(dat = grpDat[[1]], tm = 3600, v = 1.4)
grpDat <- split_dat(hDat)
rem(dat = grpDat[[1]], tm = 3600, v = 1.4)
remBoot(hDat, tm = 1800, v = 0.89, nboots, error_stat = c("ci"))
nboots <- 1000
remBoot(hDat, tm = 1800, v = 0.89, nboots, error_stat = c("ci"))
devtools::install_github("arcaravaggi/remBoot", force = TRUE)
library("remBoot", lib.loc="~/R/win-library/3.3")
remDat <- data.frame(cbind(site <- sample(1:4, 200, replace=TRUE),
cam <- sample(1:20, 200, replace = TRUE),
count <- sample(1:3, 200, replace = TRUE),
dist <- runif(200, min=0, max=0.006),
theta <- runif(200, min=0, max=0.6)))
remDat <- data.frame(cbind(site <- sample(1:4, 200, replace=TRUE),
count <- sample(1:3, 200, replace = TRUE),
dist <- runif(200, min=0, max=0.006),
theta <- runif(200, min=0, max=0.6)))
colnames(remDat) <- c("site","cam", "count", "dist", "theta")
colnames(remDat) <- c("site","count", "dist", "theta")
remDat <- data.frame(cbind(site <- sample(1:4, 479, replace=TRUE),
count <- sample(1:3, 479, replace = TRUE),
dist <- runif(479, min=0, max=0.006),
theta <- runif(479, min=0, max=0.6)))
output <- remBoot(remDat, tm = 5040, v = 0.71, nboots, error_stat = c("ci"))
nboots <- 1000
output <- remBoot(remDat, tm = 5040, v = 0.71, nboots, error_stat = c("ci"))
output
output <- remBoot(remDat, tm = 5040, v = 0.71, nboots, error_stat = c("sd"))
output
remDat <- data.frame(cbind(site <- sample(1, 479, replace=TRUE),
count <- sample(1:3, 479, replace = TRUE),
dist <- runif(479, min=0, max=0.006),
theta <- runif(479, min=0, max=0.6)))
View(remDat)
output <- remBoot(remDat, tm = 5040, v = 0.71, nboots, error_stat = c("sd"))
output
plot.new()
plot(0,type='n',axes=FALSE,ann=FALSE)
citation("stats")
library(maptools)
sunrise.set <- function(lat, long, date, timezone="UTC", num.days=1){
#this needs to be long lat#
lat.long <- matrix(c(long, lat), nrow=1)
day <- as.POSIXct(date, tz=timezone)
sequence <- seq(from=day, length.out=num.days , by="days")
sunrise <- sunriset(lat.long, sequence, direction="sunrise", POSIXct=TRUE)
sunset <- sunriset(lat.long, sequence, direction="sunset", POSIXct=TRUE)
ss <- data.frame(sunrise, sunset)
ss <- ss[,-c(1,3)]
colnames(ss)<-c("sunrise", "sunset")
return(ss)
}
sunrise.set(51.672667, -3.519628, "2008-11-08", timezone="EST")
sunrise.set(51.672667, -3.519628, "2017-04-25")
sunrise.set(51.672667, -3.519628, "2017-04-25", num.days = 10)
(1.78 + 0.84)/2
install(slidify)
install.packages(slidify)
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidify)
setwd("G:/Dropbox/GitHub/BL6024_UCC_2017")
author("Lecture 01")
slidify('index.Rmd')
slidify('index.Rmd')
author      : Dr. Tom Reed
author      : Dr Tom Reed
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
